# Docker Compose for Enhanced CodeAgent Integration
# Supports both CPU and GPU deployments with automatic detection

version: '3.8'

services:
  # GPU-optimized vLLM server
  vllm-server-gpu:
    image: vllm/vllm-openai:latest
    container_name: enhanced-codeagent-vllm-gpu
    command: [
      "--model", "${DEEPSEEK_MODEL:-deepseek-ai/DeepSeek-R1-Distill-Qwen-7B}",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--tensor-parallel-size", "${TENSOR_PARALLEL_SIZE:-1}",
      "--gpu-memory-utilization", "${GPU_MEMORY_UTILIZATION:-0.8}",
      "--max-model-len", "${MAX_MODEL_LENGTH:-8192}",
      "--trust-remote-code"
    ]
    ports:
      - "8000:8000"
    volumes:
      - model_cache:/root/.cache/huggingface
      - ./logs:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - HF_HOME=/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles: ["gpu", "gpu-high", "gpu-standard"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # CPU-optimized vLLM server
  vllm-server-cpu:
    image: vllm/vllm-openai:latest
    container_name: enhanced-codeagent-vllm-cpu
    command: [
      "--model", "${DEEPSEEK_MODEL:-deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B}",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--device", "cpu",
      "--max-model-len", "${MAX_MODEL_LENGTH:-4096}",
      "--trust-remote-code"
    ]
    ports:
      - "8000:8000"
    volumes:
      - model_cache:/root/.cache/huggingface
      - ./logs:/app/logs
    environment:
      - OMP_NUM_THREADS=${CPU_THREADS:-2}
      - HF_HOME=/root/.cache/huggingface
    deploy:
      resources:
        limits:
          memory: ${TOTAL_RAM_GB:-8}G
        reservations:
          memory: ${TOTAL_RAM_GB:-4}G
    profiles: ["cpu", "cpu-high", "cpu-standard", "cpu-minimal"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s

  # Enhanced CodeAgent Backend
  codeagent-backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: enhanced-codeagent-backend
    depends_on:
      vllm-server-gpu:
        condition: service_healthy
        required: false
      vllm-server-cpu:
        condition: service_healthy
        required: false
    ports:
      - "12000:12000"
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
      - ./config:/app/config
      - model_cache:/app/models
    environment:
      - DEEPSEEK_URL=http://vllm-server:8000
      - VLLM_HOST=vllm-server
      - VLLM_PORT=8000
      - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-cpu}
      - PERFORMANCE_TIER=${PERFORMANCE_TIER:-minimal}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development environment (optional)
  codeagent-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: enhanced-codeagent-dev
    depends_on:
      - codeagent-backend
    ports:
      - "12001:12000"  # Alternative port for development
    volumes:
      - .:/app
      - model_cache:/app/models
    environment:
      - DEEPSEEK_URL=http://vllm-server:8000
      - DEVELOPMENT_MODE=true
    profiles: ["dev"]
    restart: "no"

  # Monitoring and logging (optional)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: enhanced-codeagent-logs
    volumes:
      - ./logs:/var/log/app
      - ./docker/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    profiles: ["monitoring"]
    restart: unless-stopped

volumes:
  model_cache:
    driver: local

networks:
  default:
    name: enhanced-codeagent-network

# Usage examples:
# 
# For GPU systems:
# docker-compose --profile gpu up -d
# 
# For CPU systems:
# docker-compose --profile cpu up -d
# 
# For development:
# docker-compose --profile dev up
# 
# With monitoring:
# docker-compose --profile cpu --profile monitoring up -d